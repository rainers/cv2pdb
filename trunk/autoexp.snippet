;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; This file is part cv2pdb, a 
;; converter of DMD CodeView debug information to PDB files
;;
;; written by Rainer Schuetze, placed into the Public Domain
;;
;;	 D types
;; 
;; add the content of this file to 
;; <Visual Studio Installation Path>\Common7\Package\Debugger\autoexp.dat
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; load helper dll dviewhelper.dll to display strings
;;
;; add the following 2 lines to the [AutoExpand] section
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; [AutoExpand] 

object_viewhelper=$ADDIN(dviewhelper.dll,_DObjectView@28)
string_viewhelper=$ADDIN(dviewhelper.dll,_DStringView@28)
wstring_viewhelper=$ADDIN(dviewhelper.dll,_DWStringView@28)
dstring_viewhelper=$ADDIN(dviewhelper.dll,_DDStringView@28)

;; eo section AutoExpand for D variables ;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;	 D types visualizer
;; 
;; add the remainder of this file to the [Visualizer] section
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; [Visualizer]

; string, wstring and dstring use __viewhelper
string|wstring|dstring {
    preview ( 
 		  #if ($e.data == 0) ( "null" )
		  #else ( 
        #(
           "[", $e.length, "] ", [$e.__viewhelper]
        )
      )
    )
    stringview ( 
 		  #if ($e.data == 0) ( "null" )
		  #else ( 
        #(
           [$e.data, s]
        )
      )
    )
    children (
        #(
            length: [$e.length, i],
            data: [$e.data]
        )
    )
}

; strings as dynamic arrays of char (no __viewhelper, check -D option for cv2pdb!)
const char[]|char[]|const wchar[]|wchar[]|const dchar[]|dchar[] {
    preview ( 
 		  #if ($e.data == 0) ( "null" )
		  #else ( 
        #(
           "[", $e.length, "] ", [$e.data]
        )
      )
    )
    stringview ( 
 		  #if ($e.data == 0) ( "null" )
		  #else ( 
        #(
           [$e.data, s]
        )
      )
    )
    children (
        #(
            length: [$e.length, i],
            data: [$e.data]
        )
    )
}

; dynamic array
*[] {
    preview ( 
 		  #if ($e.data == 0) ( "null" )
 		  #else ( 
        #(
          "[", $e.length, "](",
          #array
          (
            expr :	($e.data)[$i],
            size :	$e.length
          ),
          ")"
        )
      )
    )
    children (
        #(
            length: [$e.length, i],
            #array (
                expr: $e.data[$i],
                size: $e.length
            )
        )
    )
}

;; display associative array
;;
aa<*> {
    preview(
      #(
        "[", $e.a->nodes, "] ", [(void*) $e.a]
      )
    )
    children(
        #(
            #array (
                expr: &$e.a->b.data[$i],
                size: $e.a->b.length
            ) : 
            #tree (
                head : $e,
                left : left,
                right : right,
                ; size : $c.size
            ) : $e
        )
    )
}

; display tree
internal@aaA<*,*> {
    preview(
      #( "<", $e.key, ", ", $e.value, ">" )
    )
}

;; display null references for class objects
*@* {
    preview(
        #( 
        #if (&$e == 0) ( "null" )
   		#else ( #( "[", [$e.__viewhelper], "] ", [$e,!] ) )
   		;; #else ( #( [$e,!] ) )
    )
  )
}

;; eo section Visualizer for D variables ;;;;;;;;;;;;;;;;;;;;;;
